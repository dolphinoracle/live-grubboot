#------------------------------------------------------------------
# some common functions
#
#------------------------------------------------------------------
#

function check_keys {
   for k in x x; do
      sleep 0.2
      if keystatus --shift; then
         if [ -z "$enable_theme" ]; then
            set enable_theme="true"
            break
         fi
         if [ "$enable_theme" == "true" ]; then
            set enable_theme="false"
            break
         fi
         if [ "$enable_theme" == "false" ]; then
            set enable_theme="true"
            break
         fi
      fi
      if keystatus --ctrl; then
         set terminal="console"
         break
      fi
   done
   unset k
}

function set_default_entry {
   if [ "${grub_platform}" = "pc" ]; then
      set timeout="-1"
  fi
  if [ -n "$last_chosen" ]; then
     set default="$last_chosen"

  fi
  if [ -n "$kopts" ]; then
       set default=0
  else
     set default='language_keyboard_timezone'
  fi

}

function secure_boot {
  if ! efi; then 
    secure_boot=false
    export secure_boot
    return 1
  fi
  
  if [ -z "$secure_boot" ]; then
      # heuristic secure boot check
      # regexp or eval appears to be non-functional in secure boot
      if ! eval true; then 
         secure_boot=true
         export secure_boot
         return 0
      fi
      regexp -s secure_boot '(false)' 'false'
      if [ -z "$secure_boot" ]; then 
         secure_boot=true
         export secure_boot
         return 0
      else
         secure_boot=false
         export secure_boot
         return 1
      
      fi
   elif [ "$secure_boot" = "true" ]; then
      return 0
   else
      return 1
   fi
}


function efi {
    if [ "${grub_platform}" = "efi" ]; then
        return 0
    fi
    return 1
}

function pc {
    if [ "${grub_platform}" = "pc" ]; then
        return 0
    fi
    return 1
}

# in_64_bit
function in_64_bit {
   if [ "${grub_cpu}" = "x86_64" ]; then
      set in_64_bit=y
      export in_64_bit
      return 0
   fi
   return 1
}


function load_video_module {
   if [ x$feature_all_video_module = xy ]; then
      insmod all_video
   else
      insmod vbe
      insmod vga
      insmod video_bochs
      insmod video_cirrus
#     insmod ieee1275_fb
#     insmod 915resolution
    fi
    if efi; then
       insmod efi_gop
       insmod efi_uga
    fi

}

function load_theme_fonts {
   export fonts_loaded
   if [ -n "$fonts_loaded" -a "$fonts_loaded" = "true" ]; then return; fi
   for font in unicode.pf2 \
               font.pf2 \
               7x13.pf2 \
               dejavu-sans-14.pf2 \
               dejavu-sans-16.pf2
   do
      if [ -f /boot/grub/fonts/$font ]; then
         loadfont /boot/grub/fonts/$font
         fonts_loaded=true
      fi
   done
   unset font
}

function load_gfxterm_fonts {
   export fonts_loaded
   if [ -n "$fonts_loaded" -a "$fonts_loaded" = "true" ]; then return; fi
   for font in unicode.pf2
   do
      if [ -f /boot/grub/fonts/$font ]; then
         loadfont /boot/grub/fonts/$font
         fonts_loaded=true
      fi
   done
   unset font
}


function load_images {
   insmod jpeg
   insmod png
}


function load_locale {
   insmod gettext
   set locale_dir="$prefix/locale"
   set secondary_locale_dir="$prefix/config/locale"
   export locale_dir
   export secondary_locale_dir
}

function getdrive {
   getdrive="$2"
   if regexp -s tmp '^\((.*)\).*' "$getdrive"; then
    getdrive="$tmp"
   fi
   if regexp -s tmp '^(.*),.*' "$getdrive"; then
    getdrive="$tmp"
   fi
   $1="$getdrive"
   unset tmp
   export $1
}


function main_menu {
   set root="$boot_root"
   set prefix="$boot_prefix"
   set_theme
   configfile $boot_prefix/grub.cfg
}

function back_to_main_menu {
  menuentry "<=== "$"Back to main menu (or press ESC)" --hotkey=Q --class=cancel {
    main_menu
  }
}

function menu_reload {
  l10n=true
  main_menu
}

function switch_to_syslinux {

    if [ "${grub_platform}" = "efi" ]; then return; fi
  if [ ! -e /boot/isolinux/isolinux.bin ]; then return; fi

  menuentry " "$"Switch to Syslinux" "$root" {

    insmod chain
    set root=($2)
    if regexp '^cd' "${root}"; then reboot; fi
    unset theme
    terminal_output console
    terminal_output gfxterm
    chainloader +1 /boot/isolinux/isolinux.bin
  }
}

function set_kopts {
    #l10n
    lopts=""
    export lopts
    if [ -z "$blang" ]; then
       lang=en
    else
       lopts="${lopts}lang=$blang "
       lang=$blang
       KEYMAP_SHORT="enter: boot, `e': options, `c': cmd-line"
       if [ "$KEYMAP_SHORT" = $"enter: boot, `e': options, `c': cmd-line" ]; then
          lang=en
          export lang
       fi
    fi
    export lang
    export blang

    # eval won't work in secure boot
    kopts=""
    export kbd   ; if [ -n "$kbd"   ]; then lopts="${lopts}kbd=$kbd "; fi
    export kbvar ; if [ -n "$kbvar" ]; then lopts="${lopts}kbvar=$kbvar "; fi
    export kbopt ; if [ -n "$kbopt" ]; then lopts="${lopts}kbopt=$kbopt "; fi
    export tz    ; if [ -n "$tz"    ]; then lopts="${lopts}tz=$tz "; fi
    kopts="$lopts"
    
    if [ -n "$blabel" ]; then  blab="$blabel";  elif [  -n "$bootlabel" ]; then  blab="$bootlabel";  fi
    if [ -n "$blab" ]; then export blab; kopts="${kopts}blab=$blab "; fi
    
    if [ -n "$bootdev" ]; then bdev="$bootdev"; fi
    if [ -n "$bdev"    ]; then export bdev; kopts="${kopts}bdev=$bdev "; fi
    
    if [ -n "$bootuuid" ]; then buuid="$bootuuid"; fi
    if [ -n "$buuid"    ]; then export buuid; kopts="${kopts}buuid=$buuid "; fi
    
    if [ -n "$bootdir" ]; then bdir="$bootdir"; fi
    if [ -n "$bdir"    ]; then export bdir; kopts="${kopts}bdir=$bdir "; fi
    
    if [ -n "$plabel" ]; then plab="$plabel"; elif [ -n "$persistlabel" ]; then  plab="$persistlabel";  fi
    if [ -n "$plab" ]; then export plab; kopts="${kopts}plab=$plab "; fi
    
    if [ -n "$persistdev" ]; then pdev="$persistdev"; fi
    if [ -n "$pdev"    ]; then export pdev; kopts="${kopts}pdev=$pdev "; fi
    
    if [ -n "$persistuuid" ]; then puuid="$persistuuid"; fi
    if [ -n "$puuid"    ]; then export puuid; kopts="${kopts}puuid=$puuid "; fi
    
    if [ -n "$persistdir" ]; then pdir="$persistdir"; fi
    if [ -n "$pdir"    ]; then export pdir; kopts="${kopts}pdir=$pdir "; fi

    export persistence ; if [ -n "$persistence" ]; then kopts="${kopts}$persistence "; fi
    export check       ; if [ -n "$check"       ]; then kopts="${kopts}$check "; fi
    export toram       ; if [ -n "$toram"       ]; then kopts="${kopts}$toram "; fi
    export invert      ; if [ -n "$invert"      ]; then kopts="${kopts}$invert "; fi
    export from        ; if [ -n "$from"        ]; then kopts="${kopts}$from "; fi
    export hwclock     ; if [ -n "$hwclock"     ]; then kopts="${kopts}$hwclock "; fi
    export password    ; if [ -n "$password"    ]; then kopts="${kopts}$password "; fi
    export norepo      ; if [ -n "$norepo"      ]; then kopts="${kopts}$norepo "; fi
    export store       ; if [ -n "$store"       ]; then kopts="${kopts}$store "; fi
    export savestate   ; if [ -n "$savestate"   ]; then kopts="${kopts}$savestate "; fi
    export save        ; if [ -n "$save"        ]; then kopts="${kopts}$save "; fi
    export splasht     ; if [ -n "$splasht"     ]; then kopts="${kopts}$splasht "; fi
    export failsafe    ; if [ -n "$failsafe"    ]; then kopts="${kopts}$failsafe "; fi
    export vga         ; if [ -n "$vga"         ]; then kopts="${kopts}vga=$vga "; fi
    #export video       ; if [ -n "$video"       ]; then kopts="${kopts}video=$video "; fi
    # save disable_theme
    if [ -n "$save" -a -n "$disable_theme" ]; then
       kopts="${kopts}disable_theme "
    fi

    # save disable_background
    if [ -n "$save" -a -n "$disable_background" ]; then
       kopts="${kopts}disable_background "
       export disable_background
    fi

}


function options_menu_reload {
  if [ -n "$1" ]; then
    default=$1
    export default
  fi
  configfile /boot/grub/config/options_menu.cfg
}


function l10n_menu_reload {
  export default
  default=4
  lang=$blang
 
  # check we have translations of KEYMAP_SHORT
  # using internal KEYMAP_SHORT string "enter: boot, `e': options, `c': cmd-line"
  # which shall be converted using themes internal gettext translations

  KEYMAP_SHORT="enter: boot, `e': options, `c': cmd-line"
  if [ "$KEYMAP_SHORT" = $"enter: boot, `e': options, `c': cmd-line" ]; then
      lang=en
  fi

  configfile /boot/grub/config/l10n_menu.cfg
}


function l10n_reset {
  blang=
  lang=
  slang=
  kbd=
  kbvar=
  tz=
}

function toggleXXX {
x="$1"
y="$2"
if [ -z "$x" -o -z "$y" ]; then return; fi
eval v='"$'$x'"'

if [ -z "$v" -o "$v" != "$y"  ]; then
  eval $x="'$y'"
else
  eval $x=
fi
unset v
unset x
unset y
}

function toggle {
x="$1"
y="$2"
if [ -z "$x" -o -z "$y" ]; then return; fi
if secure_boot; then
   toggle_sb "$x" "$y"
   return
fi

eval v='"$'$x'"'
if [ -z "$v" -o "$v" != "$y"  ]; then
  eval $x="'$y'"
else
  eval $x=
fi
unset v
unset x
unset y
}

function toggle_sb {

x="$1"
y="$2"

  if [ "$x" == "persistence" ]; then v="$persistence";if [ -z "$v" -o "$v" != "$y"  ]; then persistence="$y" ; else persistence=""; fi; export persistence;
elif [ "$x" == "check"       ]; then v="$check";      if [ -z "$v" -o "$v" != "$y"  ]; then check="$y"       ; else check="";       fi; export check      ;
elif [ "$x" == "toram"       ]; then v="$toram";      if [ -z "$v" -o "$v" != "$y"  ]; then toram="$y"       ; else toram="";       fi; export toram      ;
elif [ "$x" == "invert"      ]; then v="$invert";     if [ -z "$v" -o "$v" != "$y"  ]; then invert="$y"      ; else invert="";      fi; export invert     ;
elif [ "$x" == "from"        ]; then v="$from";       if [ -z "$v" -o "$v" != "$y"  ]; then from="$y"        ; else from="";        fi; export from       ;
elif [ "$x" == "hwclock"     ]; then v="$hwclock";    if [ -z "$v" -o "$v" != "$y"  ]; then hwclock="$y"     ; else hwclock="";     fi; export hwclock    ;
elif [ "$x" == "password"    ]; then v="$password";   if [ -z "$v" -o "$v" != "$y"  ]; then password="$y"    ; else password="";    fi; export password   ;
elif [ "$x" == "norepo"      ]; then v="$norepo";     if [ -z "$v" -o "$v" != "$y"  ]; then norepo="$y"      ; else norepo="";      fi; export norepo     ;
elif [ "$x" == "splasht"     ]; then v="$splasht";    if [ -z "$v" -o "$v" != "$y"  ]; then splasht="$y"     ; else splasht="";     fi; export splasht    ;
elif [ "$x" == "store"       ]; then v="$store";      if [ -z "$v" -o "$v" != "$y"  ]; then store="$y"       ; else store="";       fi; export store      ;
elif [ "$x" == "savestate"   ]; then v="$savestate";  if [ -z "$v" -o "$v" != "$y"  ]; then savestate="$y"   ; else savestate="";   fi; export savestate  ;
elif [ "$x" == "failsafe"    ]; then v="$failsafe";   if [ -z "$v" -o "$v" != "$y"  ]; then failsafe ="$y"   ; else failsafe ="";   fi; export failsafe   ;
elif [ "$x" == "video"       ]; then v="$video";      if [ -z "$v" -o "$v" != "$y"  ]; then video="$y"       ; else video="";       fi; export video      ;
elif [ "$x" == "vga"         ]; then v="$vga";        if [ -z "$v" -o "$v" != "$y"  ]; then vga="$y"         ; else vga="";         fi; export vga        ;
elif [ "$x" == "save"        ]; then v="$save";       if [ -z "$v" -o "$v" != "$y"  ]; then save="$y"        ; else save="";        fi; export save       ;
fi

unset v
unset x
unset y
}


